>>> import maze
>>> m = maze.newMaze(3, 4)
>>> m[0]
[<maze.cell object at 0x1049977c0>, <maze.cell object at 0x1048deaf0>, <maze.cell object at 0x104912610>, <maze.cell object at 0x1049a2b80>]
>>> m[0][0]
<maze.cell object at 0x1049977c0>
>>> m[0][0].row
0
>>> m[1][2].row
1
>>> m[1][2].col
2
>>> 

question 1
>>> numbers = [[1, 2, 3], [4, 5, 6]]
>>> numbers[0][0]

question 2
index into first dimension, then index specifically into second dimension
make sure to index from 0


question 3
>>> numbers = [[0, 0] for _ in range(6)]
>>> numbers
[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]
>>> numbers[5]
[0, 0]
>>> numbers[5][1]
0

>>> numbers[5][1]=12
>>> numbers
[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 12]]
>>> numbers[1][5]=12
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: list assignment index out of range
>>> 


Step 3
ikeafanasiev@MacBookAir assessment_1 % python3 
Python 3.9.6 (default, Mar 12 2025, 20:22:46) 
[Clang 17.0.0 (clang-1700.0.13.3)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> import maze
>>> m = maze.newMaze(3,4)
>>> maze.showMaze(3, 4, m)
+-+-+-+-+
| | | | |
+-+-+-+-+
| | | | |
+-+-+-+-+
| | | | |
+-+-+-+-+
>>> m[1][2].leftConnected = True
>>> maze.showMaze(3, 4, m)
+-+-+-+-+
| | | | |
+-+-+-+-+
| |   | |
+-+-+-+-+
| | | | |
+-+-+-+-+

1. put name of the function you are calling then in parenthesis, put all the arguements, one for each parameter
newMaze(3,4)
2. an outer  for loop, using a call to the 'range' function, looks through the items in the outer array
these items are themselves arrays so there is also an inner for loop to look through the items in the inner array
3. it is the same as with the loops, but a 'for' loop is needed for each dimension

stage 4:
ikeafanasiev@MacBookAir assessment_1 % python3 
Python 3.9.6 (default, Mar 12 2025, 20:22:46) 
[Clang 17.0.0 (clang-1700.0.13.3)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> import random
>>> import maze
>>> rows = random.randint(3,5)
>>> cols = random.randint(5,10)
>>> rows
5
>>> cols
10
>>> rows
5
>>> rows = random.randint(3,5)
>>> rows
4
>>> m = maze.newMaze(rows, cols)
>>> help(maze.showMaze)

>>> maze.showMaze(rows, cols)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: showMaze() missing 1 required positional argument: 'maze'
>>> maze.showMaze(rows, cols, m)
+-+-+-+-+-+-+-+-+-+-+
| | | | | | | | | | |
+-+-+-+-+-+-+-+-+-+-+
| | | | | | | | | | |
+-+-+-+-+-+-+-+-+-+-+
| | | | | | | | | | |
+-+-+-+-+-+-+-+-+-+-+
| | | | | | | | | | |
+-+-+-+-+-+-+-+-+-+-+
>>> row = random.randint(0, rows - 1)
>>> col = random.randint(0, cols - 1)
>>> current = m[row][col]
>>> current.visited = True
>>> stack[]
  File "<stdin>", line 1
    stack[]
          ^
SyntaxError: invalid syntax
>>> stack = []
>>> stack.append(current)
>>> numVisited = 1
>>> current.leftConnected = True
>>> maze.showMaze(rows, cols, m)
+-+-+-+-+-+-+-+-+-+-+
| | | | | | | |   | |
+-+-+-+-+-+-+-+-+-+-+
| | | | | | | | | | |
+-+-+-+-+-+-+-+-+-+-+
| | | | | | | | | | |
+-+-+-+-+-+-+-+-+-+-+
| | | | | | | | | | |
+-+-+-+-+-+-+-+-+-+-+
>>> 


question 1:
this assigns the value `maze[row][col]` to the variable `current`
question 2:
this sets the visited property of the cell to `True`
